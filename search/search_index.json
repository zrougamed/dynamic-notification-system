{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udce4 Dynamic Notification System Documentation","text":""},{"location":"#overview","title":"\ud83d\udcdd Overview","text":"<p>The Dynamic Notification System is a platform designed for managing \u23f0 jobs and sending \ud83d\udce7 via multiple \ud83d\udce1. It supports:</p> <ul> <li>\ud83d\udce5 Dynamic \ud83d\udd0c for various \ud83d\udcec methods.</li> <li>Managing \u23f0 jobs through a \u23f1\ufe0f-based scheduler.</li> <li>\ud83c\udf10 APIs for creating and managing jobs.</li> </ul>"},{"location":"#features","title":"\u2b50 Features","text":"<ul> <li>\ud83d\udd04 Multi-platform Support: Send notifications via \ud83d\udce7, Slack, SMS, and Webhooks.</li> <li>\ud83d\udd0c Dynamic Plugin System: Load \ud83d\udcec \ud83d\udd0c dynamically based on the \u2699\ufe0f.</li> <li>\ud83d\uddc4\ufe0f Database Integration: Store \u23f0 jobs and their execution \ud83d\udcdc in a \ud83d\udc2c database.</li> <li>\u23f1\ufe0f Scheduler: Manage job \u23f0 and ensure timely execution.</li> <li>\ud83c\udf10 API:<ul> <li>\u270f\ufe0f Create new jobs.</li> <li>\ud83d\udcc4 Retrieve existing jobs.</li> </ul> </li> <li>\u26a0\ufe0f Error Handling: Gracefully handle \ud83d\udea8 and \ud83d\udd17 issues.</li> </ul>"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":""},{"location":"#components","title":"\ud83e\udde9 Components","text":"<ol> <li> <p>\u2699\ufe0f Configuration Loader:</p> <ul> <li>\ud83d\udee0\ufe0f Reads settings from a \ud83d\uddc2\ufe0f YAML \u2699\ufe0f file.</li> <li>Configures \ud83d\udc2c, \ud83d\udd0c, and \ud83d\udda5\ufe0f behavior.</li> </ul> </li> <li> <p>\ud83d\uddc4\ufe0f Database:</p> <ul> <li>\ud83d\udee0\ufe0f Stores job metadata, including \u23f0 expressions, \ud83d\udcec details, and execution \ud83d\udcdc.</li> </ul> </li> <li> <p>\ud83d\udd0c Plugins:</p> <ul> <li>Dynamically loaded \ud83d\udcec \ud83d\udd0c to send \ud83d\udce8 through different \ud83d\udce1 (e.g., \ud83d\udce7, \ud83d\udce9, \ud83d\udcac).</li> </ul> </li> <li> <p>\u23f1\ufe0f Scheduler:</p> <ul> <li>Based on the <code>cron</code> \ud83d\udee0\ufe0f.</li> <li>Executes \u23f0 jobs at specified \ud83d\udd52.</li> </ul> </li> <li> <p>\ud83c\udf10 API:</p> <ul> <li>Built with <code>Gorilla Mux</code> for \ud83d\udee3\ufe0f.</li> <li>Provides \ud83d\udd17 for job management.</li> </ul> </li> </ol>"},{"location":"#setup-and-installation","title":"\ud83d\udee0\ufe0f Setup and Installation","text":""},{"location":"#prerequisites","title":"\ud83e\uddfe Prerequisites","text":"<ul> <li>\ud83d\udc39 Go (version 1.23+)</li> <li>\ud83d\udc2c MySQL database (docker compose includes one)</li> <li>\ud83d\uddc2\ufe0f YAML \u2699\ufe0f file</li> </ul>"},{"location":"#installation-steps","title":"\ud83d\udce6 Installation Steps","text":"<ol> <li>Clone the repository: <pre><code>git clone https://github.com/zrougamed/dynamic-notification-system.git\ncd dynamic-notification-system\n</code></pre></li> <li>Build the application: <pre><code>make all\n</code></pre></li> <li>Configure the application:</li> <li>Create a <code>config.yaml</code> file:</li> </ol> <p><pre><code>scheduler: true\ndatabase:\n    host: localhost\n    port: 3306\n    user: root\n    password: password\n    name: notifications\nchannels:\n    email:\n        enabled: true\n        smtp_server: \"smtp.example.com\"\n        smtp_port: 587\n        username: \"your-email@example.com\"\n        password: \"your-password\"\n    sms:\n        enabled: false\n        provider_api: \"https://sms-provider.com/api\"\n        api_key: \"your-sms-api-key\"\n</code></pre> 4. Run the application: <pre><code>./dynamic-notification-system\n</code></pre></p>"},{"location":"#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ol> <li>Getting Started</li> <li>Usage</li> <li>Developer Guide</li> <li>Main Module</li> <li>Scheduler Module</li> <li>Notifier Module</li> <li>Config Module</li> <li>Contributing</li> </ol>"},{"location":"#api-endpoints","title":"\ud83c\udf10 API Endpoints","text":""},{"location":"#post-jobs","title":"\ud83d\udce4 POST /jobs","text":"<ul> <li>\ud83d\udcc4 Description: Create a new scheduled job.</li> <li>\ud83d\udcdd Request Body: <pre><code>{\n\"name\": \"Job Name\",\n\"notification_type\": \"email\",\n\"recipient\": \"example@example.com\",\n\"message\": {\n    \"title\": \"Server Alert \ud83d\udea8\",\n    \"text\": \"Disk space is low on server\",\n    \"priority\": \"high\"\n},\n\"schedule_expression\": \"0 9 * * *\"\n}\n</code></pre></li> <li>\ud83d\udcec Response: <pre><code>{\n\"id\": 1,\n\"name\": \"Job Name\",\n\"notification_type\": \"email\",\n\"recipient\": \"example@example.com\",\n\"message\": {\n    \"title\": \"Server Alert \ud83d\udea8\",\n    \"text\": \"Disk space is low on server\",\n    \"priority\": \"high\"\n},\n\"schedule_expression\": \"0 9 * * *\"\n}\n</code></pre></li> </ul>"},{"location":"#get-jobs","title":"\ud83d\udcc4 GET /jobs","text":"<ul> <li>\ud83d\udcc4 Description: Retrieve all scheduled jobs.</li> <li>\ud83d\udcec Response: <pre><code>[\n{\n    \"id\": 1,\n    \"name\": \"Job Name\",\n    \"notification_type\": \"email\",\n    \"recipient\": \"example@example.com\",\n    \"message\": {\n    \"title\": \"Server Alert \ud83d\udea8\",\n    \"text\": \"Disk space is low on server\",\n    \"priority\": \"high\"\n    },\n    \"schedule_expression\": \"0 9 * * *\"\n}\n]\n</code></pre></li> </ul>"},{"location":"#development","title":"\ud83d\udee0\ufe0f Development","text":""},{"location":"#libraries-used","title":"\ud83d\udd11 Libraries Used","text":"<ul> <li><code>github.com/gorilla/mux</code>: For API routing.</li> <li><code>github.com/robfig/cron/v3</code>: For job scheduling.</li> <li><code>github.com/go-sql-driver/mysql</code>: For MySQL database integration.</li> </ul>"},{"location":"#future-enhancements","title":"\ud83d\ude80 Future Enhancements","text":"<ul> <li>Support for additional channels (e.g., WhatsApp, Telegram).</li> <li>Role-based access control (RBAC) for APIs.</li> <li>Enhanced logging and monitoring tools.</li> </ul>"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>MIT License</p>"},{"location":"#contributors","title":"\ud83d\udc65 Contributors","text":"<ul> <li>Mohamed Zrouga</li> </ul>"},{"location":"contributing/","title":"Contributing \u2728","text":"<p>We warmly welcome contributions to the Dynamic Notification System! Whether you\u2019re fixing bugs, adding new features, or improving documentation, your efforts are greatly appreciated. Here\u2019s how you can contribute effectively:</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute \ud83d\udee0\ufe0f","text":"<ol> <li> <p>Fork the Repository:</p> <ul> <li>Click the \"Fork\" button at the top of this page to create your own copy of the repository.</li> </ul> </li> <li> <p>Clone Your Fork:</p> <ul> <li>Clone your forked repository to your local machine:  <pre><code>git clone https://github.com/your-username/dynamic-notification-system.git\ncd dynamic-notification-system\n</code></pre></li> </ul> </li> <li> <p>Create a New Branch:</p> <ul> <li>Use a descriptive name for your branch:  <pre><code>git checkout -b feature/your-feature-name\n</code></pre></li> </ul> </li> <li> <p>Make Changes:</p> <ul> <li>Code your feature or fix a bug.</li> <li>Follow coding standards (see below).</li> <li>Write tests for your changes.</li> </ul> </li> <li> <p>Commit Your Changes:</p> <ul> <li>Write clear and concise commit messages:  <pre><code>git commit -m \"Add feature: your-feature-name\"\n</code></pre></li> </ul> </li> <li> <p>Push Your Changes:</p> <ul> <li>Push your changes to your forked repository:  <pre><code>git push origin feature/your-feature-name\n</code></pre></li> </ul> </li> <li> <p>Open a Pull Request:</p> <ul> <li>Go to the original repository.</li> <li>Click \"New Pull Request\" and provide a detailed description of your changes.</li> </ul> </li> </ol>"},{"location":"contributing/#contribution-guidelines","title":"Contribution Guidelines \ud83d\udd27","text":""},{"location":"contributing/#coding-standards","title":"Coding Standards \u270c\ufe0f","text":"<ul> <li>Format Your Code:<ul> <li>Use <code>gofmt</code> to format your Go code.   <pre><code>gofmt -s -w .\n</code></pre></li> </ul> </li> <li>Adhere to Go Best Practices:<ul> <li>Follow Go's Effective Go guidelines.</li> </ul> </li> <li>Comment Your Code:<ul> <li>Add comments to explain complex logic and exported functions.</li> </ul> </li> </ul>"},{"location":"contributing/#documentation","title":"Documentation \ud83d\udcd6","text":"<ul> <li>Update Documentation:<ul> <li>Ensure that your changes are reflected in the documentation.</li> <li>Use Markdown for documentation updates.</li> </ul> </li> </ul>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues \ud83d\udce2","text":"<p>Found a bug or have a suggestion? Let us know by opening an issue:</p> <ol> <li>Navigate to the Issues tab.</li> <li>Click \"New Issue.\"</li> <li>Provide a clear and detailed description of the issue.<ul> <li>Include steps to reproduce the problem if applicable.</li> </ul> </li> </ol>"},{"location":"contributing/#join-the-discussion","title":"Join the Discussion \ud83d\udde8\ufe0f","text":"<p>Collaborate with the community by participating in discussions:</p> <ul> <li>Share ideas for new features.</li> <li>Help review and test pull requests.</li> <li>Engage in code reviews to ensure high-quality contributions.</li> </ul> <p>Thank you for contributing to the Dynamic Notification System! Together, we can make this project even better. \u2764\ufe0f</p>"},{"location":"developer_guide/","title":"Developer Guide","text":""},{"location":"developer_guide/#architecture-overview","title":"Architecture Overview \ud83d\udd0d","text":""},{"location":"developer_guide/#main-application","title":"Main Application","text":"<p>The core of the application, responsible for:</p> <ul> <li>Loading and validating the configuration (<code>config.yaml</code>).</li> <li>Dynamically loading plugins for different notification channels.</li> <li>Initializing and managing the scheduler for job execution.</li> <li>Setting up the HTTP server to handle RESTful APIs for managing jobs.</li> </ul>"},{"location":"developer_guide/#plugins","title":"Plugins","text":"<p>Plugins are modular, dynamically loaded components that extend the application's notification capabilities:</p> <ul> <li>Dynamic Loading: Add new plugins without restarting the application.</li> <li>Interface Compliance: Each plugin must implement the <code>Notifier</code> interface:</li> </ul> <pre><code>type Notifier interface {\n    Name() string\n    Type() string\n    Notify(message *Message) error\n}\n</code></pre> <ul> <li>Examples of plugins include Email, Slack, SMS, and Webhook notifiers.</li> </ul>"},{"location":"developer_guide/#scheduler","title":"Scheduler","text":"<p>The scheduler is built using a cron-based mechanism to manage job execution:</p> <ul> <li>Job Management: Handles adding, removing, and executing jobs based on cron expressions.</li> <li>Persistence: Stores job details in a database for reliable scheduling.</li> <li>Concurrency: Supports concurrent job execution while maintaining thread safety.</li> </ul>"},{"location":"developer_guide/#plugin-development","title":"Plugin Development \ud83d\udee0\ufe0f","text":""},{"location":"developer_guide/#steps-to-develop-a-new-plugin","title":"Steps to Develop a New Plugin","text":"<ol> <li> <p>Implement the Interface:</p> <ul> <li>Create a new Go file for your plugin and implement the <code>Notifier</code> interface.</li> <li>Example:</li> </ul> <pre><code>type MyPlugin struct {}\n\nfunc (p *MyPlugin) Name() string {\n    return \"MyPlugin\"\n}\n\nfunc (p *MyPlugin) Type() string {\n    return \"Custom\"\n}\n\nfunc (p *MyPlugin) Notify(message *Message) error {\n    // Your notification logic\n    return nil\n}\n</code></pre> </li> <li> <p>Compile the Plugin:</p> <ul> <li>Use Go's plugin build mode to compile your plugin into a shared object file:  <pre><code>go build -buildmode=plugin -o plugins/my_plugin.so my_plugin.go\n</code></pre></li> </ul> </li> <li> <p>Test the Plugin:</p> <ul> <li>Ensure your plugin works as expected by integrating it into the application.</li> <li>Example usage:  <pre><code>plugin, err := plugin.Open(\"plugins/my_plugin.so\")\nif err != nil {\n    log.Fatal(err)\n}\n// Further plugin initialization...\n</code></pre></li> </ul> </li> <li> <p>Integrate with the Application:</p> <ul> <li>Update the <code>config.yaml</code> to include your new plugin.</li> </ul> </li> </ol>"},{"location":"developer_guide/#database-schema","title":"Database Schema \ud83d\udcca","text":""},{"location":"developer_guide/#scheduled-jobs-table","title":"Scheduled Jobs Table","text":"<p>The <code>scheduled_jobs</code> table stores information about scheduled notifications:</p> <ul> <li>Columns:<ul> <li><code>id</code>: Unique identifier for the job.</li> <li><code>name</code>: Name of the scheduled job.</li> <li><code>notification_type</code>: Type of notification (e.g., email, Slack).</li> <li><code>recipient</code>: Target recipient (e.g., email address, phone number).</li> <li><code>message</code>: JSON-encoded message to be sent.</li> <li><code>schedule_expression</code>: Cron expression defining the job schedule.</li> </ul> </li> </ul>"},{"location":"developer_guide/#deployment","title":"Deployment \ud83d\ude80","text":""},{"location":"developer_guide/#using-docker","title":"Using Docker","text":"<ol> <li>Build Docker Image:    <pre><code>docker build -t dynamic-notification-system .\n</code></pre></li> <li>Run Container:    <pre><code>docker run -d -p 8080:8080 dynamic-notification-system\n</code></pre></li> </ol>"},{"location":"developer_guide/#without-docker","title":"Without Docker","text":"<ol> <li>Compile the application:    <pre><code>make all\ncd build\n</code></pre></li> <li>Run the application:    <pre><code>./notification-system\n</code></pre></li> </ol>"},{"location":"developer_guide/#api-endpoints","title":"API Endpoints \ud83c\udf10","text":""},{"location":"developer_guide/#job-management","title":"Job Management","text":"<ul> <li> <p>POST /jobs:</p> <ul> <li>Adds a new job.</li> <li>Example Request:   <pre><code>{\n    \"name\": \"Daily Report\",\n    \"notification_type\": \"email\",\n    \"recipient\": \"user@example.com\",\n    \"message\": {\n        \"title\": \"Daily Report\",\n        \"message\": \"Your daily report is ready.\"\n    },\n    \"schedule_expression\": \"0 9 * * *\"\n}\n</code></pre></li> </ul> </li> <li> <p>GET /jobs:</p> <ul> <li>Retrieves all scheduled jobs.</li> </ul> </li> <li> <p>GET /schema/job:</p> <ul> <li>Retrieves the job schema for easier integration and validation.</li> </ul> </li> </ul> <p>Thank you for contributing to and developing the Dynamic Notification System! \ud83c\udf89</p>"},{"location":"getting_started/","title":"Getting Started \ud83d\ude80","text":"<p>Welcome to the Dynamic Notification System! This guide will help you set up and run the application quickly.</p>"},{"location":"getting_started/#prerequisites","title":"Prerequisites \ud83d\udee0\ufe0f","text":"<p>Ensure the following tools are installed on your system:</p> <ol> <li>Go (version 1.23+):<ul> <li>Download and install from golang.org.</li> <li>Verify installation: <pre><code>go version\n</code></pre></li> </ul> </li> <li>Docker (optional for containerized deployment):<ul> <li>Download and install from docker.com.</li> <li>Verify installation: <pre><code>docker --version\n</code></pre></li> </ul> </li> <li>MySQL:<ul> <li>Install MySQL for your platform or use the docker-compose shipped with the code.</li> <li>Load the schema from <code>db</code> folder</li> </ul> </li> </ol>"},{"location":"getting_started/#installation","title":"Installation \u2699\ufe0f","text":"<p>Follow these steps to set up the application:</p> <ol> <li> <p>Clone the Repository:</p> <ul> <li>Clone the source code from GitHub: <pre><code>git clone https://github.com/zrougamed/dynamic-notification-system.git\ncd dynamic-notification-system\n</code></pre></li> </ul> </li> <li> <p>Build the Application:</p> <ul> <li>Compile the source code into a binary: <pre><code>make all\n</code></pre></li> </ul> </li> </ol>"},{"location":"getting_started/#configuration","title":"Configuration \ud83d\udcdd","text":"<p>The application relies on a <code>config.yaml</code> file for its configuration. Here's how to set it up:</p> <ol> <li> <p>Edit <code>config.yaml</code>:</p> <ul> <li>Modify the file to include your credentials and preferences. Example: <pre><code>database:\n  host: \"localhost\"\n  port: 3306\n  user: \"your-db-user\"\n  password: \"your-db-password\"\n  name: \"dynamic_notification_system\"\nscheduler: true\nchannels:\n  email:\n    enabled: true\n    smtp_server: \"smtp.example.com\"\n    smtp_port: 587\n    username: \"your-email@example.com\"\n    password: \"your-email-password\"\n</code></pre></li> </ul> </li> <li> <p>Verify Configuration:</p> <ul> <li>Ensure the <code>config.yaml</code> file is in the root directory of the application: <pre><code>ls | grep config.yaml\n</code></pre></li> </ul> </li> </ol>"},{"location":"getting_started/#running-the-application","title":"Running the Application \ud83c\udfc3","text":""},{"location":"getting_started/#option-1-direct-execution","title":"Option 1: Direct Execution","text":"<p>Run the application directly using the compiled binary: <pre><code>./notification-system\n</code></pre> - The application will start on the default port (8080). - Access the application via:   - API: <code>http://localhost:8080</code></p>"},{"location":"getting_started/#option-2-using-docker","title":"Option 2: Using Docker","text":"<p>For a containerized deployment:</p> <ul> <li>Build the Docker Image: <pre><code>docker build -t dynamic-notification-system .\n</code></pre></li> <li>Run the Container: <pre><code>docker run -d -p 8080:8080 dynamic-notification-system\n</code></pre></li> <li>Verify the Container:<ul> <li>List running containers: <code>docker ps</code></li> <li>Access the application at : <code>http://localhost:8080</code></li> </ul> </li> </ul>"},{"location":"getting_started/#next-steps","title":"Next Steps \u27a1\ufe0f","text":"<p>After setting up the application:</p> <ul> <li>Configure Plugins for custom notification channels.</li> <li>Start scheduling jobs using the API Endpoints.</li> </ul> <p>Enjoy using the Dynamic Notification System! \ud83c\udf89</p>"},{"location":"usage/","title":"Usage \ud83d\udcd8","text":"<p>Learn how to make the most of the Dynamic Notification System by adding new notification channels and scheduling notifications.</p>"},{"location":"usage/#adding-new-notification-channels","title":"Adding New Notification Channels \ud83d\udd14","text":"<p>The system supports a plugin-based architecture for notification channels. Here\u2019s how to add a new channel:</p> <ol> <li> <p>Create a Go Plugin:</p> <ul> <li> <p>Develop a Go plugin that implements the <code>Notifier</code> interface: <pre><code>type Notifier interface {\n    Name() string\n    Type() string\n    Notify(message *Message) error\n}\n</code></pre></p> </li> <li> <p>Example: <pre><code>type MyPlugin struct {}\n\nfunc (p *MyPlugin) Name() string {\n    return \"MyPlugin\"\n}\n\nfunc (p *MyPlugin) Type() string {\n    return \"Custom\"\n}\n\nfunc (p *MyPlugin) Notify(message *Message) error {\n    fmt.Printf(\"Sending message: %s\", message.Text)\n    return nil\n}\n</code></pre></p> </li> </ul> </li> <li> <p>Compile the Plugin:</p> <ul> <li>Use the following command to compile your Go plugin:   <pre><code>go build -buildmode=plugin -o plugins/my_plugin.so my_plugin.go\n</code></pre></li> </ul> </li> <li> <p>Add the Plugin to the Directory:</p> <ul> <li>Place the compiled <code>.so</code> file into the <code>plugins/</code> directory.</li> </ul> </li> <li> <p>Update <code>config.yaml</code>:</p> <ul> <li>Add the new channel configuration to <code>config.yaml</code>. Example:   <pre><code>channels:\n  my_plugin:\n    enabled: true\n    custom_field: \"value\"\n</code></pre></li> </ul> </li> <li> <p>Restart the Application:</p> <ul> <li>Restart the application to load the new plugin:   <pre><code>./notification-system\n</code></pre></li> </ul> </li> </ol>"},{"location":"usage/#scheduling-notifications","title":"Scheduling Notifications \ud83d\uddd3\ufe0f","text":"<p>The scheduler enables you to define and automate notification jobs.</p>"},{"location":"usage/#using-the-jobs-api-endpoint","title":"Using the <code>/jobs</code> API Endpoint","text":"<p>You can define and schedule jobs directly via the HTTP API.</p> <ol> <li> <p>POST /jobs:</p> <ul> <li>Use the <code>/jobs</code> endpoint to create a new job. Example request:   <pre><code>curl -X POST http://localhost:8080/jobs      -H \"Content-Type: application/json\"      -d '{\n    \"name\": \"Daily Report\",\n    \"notification_type\": \"email\",\n    \"recipient\": \"user@example.com\",\n    \"message\": {\n        \"title\": \"Daily Report\",\n        \"message\": \"Your daily report is ready.\"\n    },\n    \"schedule_expression\": \"0 9 * * *\"\n}'\n</code></pre></li> </ul> </li> <li> <p>Verify the Job:</p> <ul> <li>Check the response to confirm the job is created:   <pre><code>{\n    \"id\": 1,\n    \"name\": \"Daily Report\",\n    \"notification_type\": \"email\",\n    \"recipient\": \"user@example.com\",\n    \"schedule_expression\": \"0 9 * * *\"\n}\n</code></pre></li> </ul> </li> <li> <p>Scheduler Execution:</p> <ul> <li>The scheduler will execute the job at the defined time based on the cron expression.</li> </ul> </li> </ol>"},{"location":"usage/#advanced-usage","title":"Advanced Usage \u2699\ufe0f","text":""},{"location":"usage/#editing-jobs","title":"Editing Jobs:","text":"<ul> <li>Modify job details directly via the database or through future API endpoints:   <pre><code>UPDATE scheduled_jobs\nSET schedule_expression = '0 10 * * *'\nWHERE id = 1;\n</code></pre></li> </ul>"},{"location":"usage/#deleting-jobs","title":"Deleting Jobs:","text":"<ul> <li>Remove a job from the schedule:   <pre><code>DELETE FROM scheduled_jobs WHERE id = 1;\n</code></pre></li> </ul>"},{"location":"usage/#examples","title":"Examples \u2728","text":""},{"location":"usage/#example-adding-a-slack-notification-job","title":"Example: Adding a Slack Notification Job","text":"<ol> <li> <p>Add a Slack plugin using the steps above.</p> </li> <li> <p>Use the <code>/jobs</code> API endpoint to add a Slack notification job:   <pre><code>curl -X POST http://localhost:8080/jobs \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"name\": \"Team Standup Reminder\",\n    \"notification_type\": \"slack\",\n    \"recipient\": \"#general\",\n    \"message\": {\n        \"title\": \"Standup Reminder\",\n        \"message\": \"Daily standup in 10 minutes!\"\n    },\n    \"schedule_expression\": \"30 8 * * 1-5\"\n}'\n</code></pre></p> </li> <li> <p>Verify execution:</p> <ul> <li>The message will be sent to the <code>#general</code> Slack channel at 8:30 AM, Monday to Friday.</li> </ul> </li> </ol> <p>Enjoy using the Dynamic Notification System to streamline your notifications! \ud83d\ude80</p>"},{"location":"technical_docs/config/","title":"Config Module \ud83d\udccb","text":""},{"location":"technical_docs/config/#configgo","title":"config.go \ud83d\udee0\ufe0f","text":""},{"location":"technical_docs/config/#purpose","title":"Purpose","text":"<p>The <code>config.go</code> file defines the application's configuration and provides utilities to load it from a YAML file. This module is essential for managing dynamic settings across various components.</p>"},{"location":"technical_docs/config/#key-components","title":"Key Components \ud83d\udd11","text":""},{"location":"technical_docs/config/#1-message-struct","title":"1. Message Struct","text":"<ul> <li>Purpose: Represents notification messages used across the system.</li> <li>Key Features:</li> <li>Implements <code>sql.Scanner</code> to parse JSON from the database into a <code>Message</code> struct.</li> <li>Implements <code>driver.Valuer</code> to convert the <code>Message</code> struct into JSON for database storage.</li> <li>Example:   <pre><code>type Message struct {\n    Title string `json:\"title\"`\n    Text  string `json:\"text\"`\n}\n\nfunc (m *Message) Scan(value interface{}) error {\n    return json.Unmarshal(value.([]byte), m)\n}\n\nfunc (m Message) Value() (driver.Value, error) {\n    return json.Marshal(m)\n}\n</code></pre></li> </ul>"},{"location":"technical_docs/config/#2-scheduledjob-struct","title":"2. ScheduledJob Struct","text":"<ul> <li>Purpose: Defines the fields required for scheduling notification jobs.</li> <li>Key Fields:</li> <li><code>ID</code>: Unique identifier for the job.</li> <li><code>Name</code>: Name of the job.</li> <li><code>NotificationType</code>: Type of notification (e.g., email, Slack).</li> <li><code>Recipient</code>: Target recipient.</li> <li><code>Message</code>: Message content in <code>Message</code> struct format.</li> <li><code>ScheduleExpression</code>: Cron expression for job timing.</li> <li>Example:   <pre><code>type ScheduledJob struct {\n    ID                 int       `json:\"id\"`\n    Name               string    `json:\"name\"`\n    NotificationType   string    `json:\"notification_type\"`\n    Recipient          string    `json:\"recipient\"`\n    Message            Message   `json:\"message\"`\n    ScheduleExpression string    `json:\"schedule_expression\"`\n}\n</code></pre></li> </ul>"},{"location":"technical_docs/config/#3-notifier-interface","title":"3. Notifier Interface","text":"<ul> <li>Purpose: Defines the methods that custom notifiers must implement.</li> <li>Methods:</li> <li><code>Name() string</code>: Returns the name of the notifier.</li> <li><code>Type() string</code>: Returns the type of the notifier.</li> <li><code>Notify(message *Message) error</code>: Sends a notification based on the provided message.</li> <li>Example Implementation:   <pre><code>type Notifier interface {\n    Name() string\n    Type() string\n    Notify(message *Message) error\n}\n</code></pre></li> </ul>"},{"location":"technical_docs/config/#4-loadconfig-function","title":"4. LoadConfig Function","text":"<ul> <li>Purpose: Reads and parses the configuration file into a structured <code>Config</code> object.</li> <li>Steps:</li> <li>Opens the <code>config.yaml</code> file.</li> <li>Parses its content into a <code>Config</code> struct.</li> <li>Returns the structured configuration for use across the application.</li> <li>Example:   <pre><code>func LoadConfig(path string) (*Config, error) {\n    data, err := ioutil.ReadFile(path)\n    if err != nil {\n        return nil, err\n    }\n    var config Config\n    err = yaml.Unmarshal(data, &amp;config)\n    if err != nil {\n        return nil, err\n    }\n    return &amp;config, nil\n}\n</code></pre></li> </ul>"},{"location":"technical_docs/config/#config-struct","title":"Config Struct \ud83d\udce6","text":""},{"location":"technical_docs/config/#purpose_1","title":"Purpose","text":"<p>Encapsulates the entire configuration for the application, including database settings, notification channels, and scheduler options.</p>"},{"location":"technical_docs/config/#key-fields","title":"Key Fields","text":"<ul> <li>Database Config:</li> <li><code>Host</code>, <code>Port</code>, <code>User</code>, <code>Password</code>, <code>Name</code></li> <li>Channels Config:</li> <li>Email, Slack, SMS, Webhook configurations</li> <li>Scheduler Flag:</li> <li>Enables or disables the job scheduler.</li> </ul>"},{"location":"technical_docs/config/#example","title":"Example","text":"<pre><code>type Config struct {\n    Database  DatabaseConfig    `yaml:\"database\"`\n    Channels  map[string]ChannelConfig `yaml:\"channels\"`\n    Scheduler bool              `yaml:\"scheduler\"`\n}\n\ntype DatabaseConfig struct {\n    Host     string `yaml:\"host\"`\n    Port     int    `yaml:\"port\"`\n    User     string `yaml:\"user\"`\n    Password string `yaml:\"password\"`\n    Name     string `yaml:\"name\"`\n}\n\ntype ChannelConfig struct {\n    Enabled    bool   `yaml:\"enabled\"`\n    Host       string `yaml:\"host\"`\n    Port       int    `yaml:\"port\"`\n    Username   string `yaml:\"username\"`\n    Password   string `yaml:\"password\"`\n    WebhookURL string `yaml:\"webhook_url\"`\n}\n</code></pre>"},{"location":"technical_docs/config/#example-flow","title":"Example Flow \ud83d\udd04","text":"<ol> <li>Load Configuration:</li> <li>The application reads <code>config.yaml</code> on startup.</li> <li>Parses the YAML file into a structured <code>Config</code> object.</li> <li>Use Configuration:</li> <li>Components access configuration values directly from the <code>Config</code> object.</li> <li>Example:      <code>go      dbConnStr := fmt.Sprintf(\"%s:%s@tcp(%s:%d)/%s\",       cfg.Database.User,       cfg.Database.Password,       cfg.Database.Host,       cfg.Database.Port,       cfg.Database.Name,     )</code></li> </ol> <p>This documentation provides a detailed explanation of <code>config.go</code>, highlighting its essential role in managing the application\u2019s dynamic settings. \ud83d\udee0\ufe0f Happy configuring!</p>"},{"location":"technical_docs/main/","title":"main.go \ud83d\udee0\ufe0f","text":""},{"location":"technical_docs/main/#purpose","title":"Purpose","text":"<p>The <code>main.go</code> file serves as the entry point of the Dynamic Notification System application. It orchestrates the initialization of configurations, plugins, the scheduler, and the HTTP server.</p>"},{"location":"technical_docs/main/#key-functions","title":"Key Functions \ud83d\udd11","text":""},{"location":"technical_docs/main/#1-configuration-loading","title":"1. Configuration Loading","text":"<ul> <li>Purpose: Loads the application's configuration settings from the <code>config.yaml</code> file.</li> <li>Implementation:</li> <li>Function: <code>config.LoadConfig</code></li> <li>Steps:<ol> <li>Reads the <code>config.yaml</code> file from the root directory.</li> <li>Validates and parses the configuration into a structured <code>Config</code> object.</li> </ol> </li> <li>Example:     <pre><code>config, err := config.LoadConfig(\"config.yaml\")\nif err != nil {\n    log.Fatalf(\"Failed to load configuration: %v\", err)\n}\n</code></pre></li> </ul>"},{"location":"technical_docs/main/#2-plugin-loading","title":"2. Plugin Loading","text":"<ul> <li>Purpose: Dynamically loads plugins that define notification channels.</li> <li>Implementation:</li> <li>Function: <code>plugins.LoadPlugins</code></li> <li>Steps:<ol> <li>Scans the <code>plugins/</code> directory for <code>.so</code> files.</li> <li>Loads and initializes each plugin dynamically.</li> </ol> </li> <li>Example:     <pre><code>err := plugins.LoadPlugins(\"plugins/\")\nif err != nil {\n    log.Fatalf(\"Failed to load plugins: %v\", err)\n}\n</code></pre></li> </ul>"},{"location":"technical_docs/main/#3-scheduler-initialization","title":"3. Scheduler Initialization","text":"<ul> <li>Purpose: Sets up the job scheduler, responsible for executing tasks based on cron expressions.</li> <li>Implementation:</li> <li>Function: <code>scheduler.Initialize</code></li> <li>Steps:<ol> <li>Establishes a database connection.</li> <li>Loads jobs from the database into the scheduler.</li> <li>Starts the cron scheduler.</li> </ol> </li> <li>Example:     <pre><code>err := scheduler.Initialize(config.Database)\nif err != nil {\n    log.Fatalf(\"Failed to initialize scheduler: %v\", err)\n}\n</code></pre></li> </ul>"},{"location":"technical_docs/main/#4-http-server-setup","title":"4. HTTP Server Setup","text":"<ul> <li>Purpose: Starts the HTTP server to handle API requests for managing notifications and jobs.</li> <li>Implementation:</li> <li>Library: Gorilla Mux</li> <li>Steps:<ol> <li>Creates a new router.</li> <li>Defines routes for job management endpoints (<code>/jobs</code>).</li> <li>Starts the server on the configured port (default: 8080).</li> </ol> </li> <li>Example:     <pre><code>r := mux.NewRouter()\nr.HandleFunc(\"/jobs\", HandlePostJob).Methods(\"POST\")\nr.HandleFunc(\"/jobs\", HandleGetJobs).Methods(\"GET\")\nlog.Fatal(http.ListenAndServe(\":8080\", r))\n</code></pre></li> </ul>"},{"location":"technical_docs/main/#example-flow","title":"Example Flow \ud83d\udd04","text":"<ol> <li>Application Start:</li> <li>Reads <code>config.yaml</code>.</li> <li>Loads plugins from the <code>plugins/</code> directory.</li> <li>Initializes the scheduler and loads jobs.</li> <li> <p>Starts the HTTP server.</p> </li> <li> <p>Incoming API Requests:</p> </li> <li>Routes are handled via the Gorilla Mux router.</li> <li>Jobs are added, retrieved, or managed based on the API calls.</li> </ol>"},{"location":"technical_docs/main/#error-handling","title":"Error Handling \u26a0\ufe0f","text":"<ul> <li>Logs detailed error messages and exits gracefully if critical components fail to initialize.</li> <li>Example:   <pre><code>if err := scheduler.Initialize(config.Database); err != nil {\n    log.Fatalf(\"Scheduler initialization failed: %v\", err)\n}\n</code></pre></li> </ul> <p>This documentation provides a high-level overview and examples for understanding and extending the functionality of the <code>main.go</code> file. Happy coding! \ud83d\ude80</p>"},{"location":"technical_docs/notifier/","title":"Notifier Package","text":"<p>The Notifier package is responsible for handling dynamic notifications within the system. It supports instant notifications via an HTTP endpoint and integrates seamlessly with the existing system configuration.</p>"},{"location":"technical_docs/notifier/#key-features","title":"Key Features","text":"<ul> <li>Instant Notifications: Handles and processes notification jobs dynamically.</li> <li>Flexible Integration: Uses configurable notifiers to send notifications based on the <code>NotificationType</code>.</li> <li>Validation: Ensures proper validation of job requests before execution.</li> </ul>"},{"location":"technical_docs/notifier/#components","title":"Components","text":""},{"location":"technical_docs/notifier/#1-setnotifiers","title":"1. SetNotifiers","text":"<p>Initializes the available notifiers.</p> <pre><code>func SetNotifiers(n []config.Notifier) {\n    notifiers = n\n}\n</code></pre>"},{"location":"technical_docs/notifier/#2-handlepostjob","title":"2. HandlePostJob","text":"<p>Handles HTTP POST requests for instant notifications.</p> <pre><code>func HandlePostJob(w http.ResponseWriter, r *http.Request) {\n    var job config.InstantJob\n\n    err := json.NewDecoder(r.Body).Decode(&amp;job)\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusBadRequest)\n        return\n    }\n\n    if err := validateJob(&amp;job); err != nil {\n        http.Error(w, err.Error(), http.StatusBadRequest)\n        return\n    }\n    for _, notifier := range notifiers {\n        if notifier.Type() == job.NotificationType {\n            err := notifier.Notify(&amp;job.Message)\n            if err != nil {\n                log.Printf(\"Error with %s: %v\", notifier.Name(), err)\n            }\n        }\n    }\n    w.WriteHeader(http.StatusCreated)\n    json.NewEncoder(w).Encode(job)\n}\n</code></pre>"},{"location":"technical_docs/notifier/#3-validation","title":"3. Validation","text":"<p>Validates the <code>InstantJob</code> struct before processing.</p> <pre><code>func validateJob(job *config.InstantJob) error {\n    if job.NotificationType == \"\" {\n        return fmt.Errorf(\"NotificationType is required\")\n    }\n    return nil\n}\n</code></pre>"},{"location":"technical_docs/notifier/#usage","title":"Usage","text":"<ol> <li>Configure the notifiers using <code>SetNotifiers</code> with a list of notifier implementations.</li> <li>Use the <code>/notify</code> endpoint to send instant notifications with the required payload.</li> </ol>"},{"location":"technical_docs/notifier/#example-payload","title":"Example Payload","text":"<pre><code>{\n    \"notificationType\": \"ntfy\",\n    \"recipient\": \"user@example.com\",\n    \"message\": {\n        \"title\": \"Disk Usage \ud83d\udea8\",\n        \"message\": \"Disk usage is above 90% on server prod-01.\",\n        \"tags\": [\"warning\", \"server\"],\n        \"priority\": 5,\n        \"attach\": \"https://example.com/logs/error.log\",\n        \"email\": \"admin@example.com\",\n        \"actions\": [\n        {\n            \"action\": \"view\",\n            \"label\": \"View Logs\",\n            \"url\": \"https://example.com/logs/error.log\"\n        },\n        {\n            \"action\": \"http\",\n            \"label\": \"Acknowledge\",\n            \"url\": \"https://example.com/acknowledge\"\n        }\n        ]\n    }\n}\n</code></pre> <p>For more details on configuration, refer to config.</p> <p>This documentation provides a detailed explanation of the Instant notification Module, enabling you to understand and extend its functionality effectively. Happy notifications! \ud83c\udf89</p>"},{"location":"technical_docs/scheduler/","title":"Scheduler Module \ud83d\udd52","text":""},{"location":"technical_docs/scheduler/#overview","title":"Overview","text":"<p>The Scheduler Module handles job scheduling and execution in the Dynamic Notification System. It is responsible for initializing the cron-based scheduler, managing scheduled jobs, and interacting with the database for job persistence.</p>"},{"location":"technical_docs/scheduler/#schedulergo","title":"scheduler.go \ud83d\udee0\ufe0f","text":""},{"location":"technical_docs/scheduler/#purpose","title":"Purpose","text":"<p>Manages the lifecycle of the scheduler, including initialization and shutdown.</p>"},{"location":"technical_docs/scheduler/#key-functions","title":"Key Functions \ud83d\udd11","text":""},{"location":"technical_docs/scheduler/#initialize","title":"Initialize","text":"<ul> <li>Purpose: Sets up the scheduler and loads jobs from the database.</li> <li>Steps:</li> <li>Establishes a connection to the database using the configuration settings.</li> <li>Initializes a cron scheduler.</li> <li>Loads jobs from the database and adds them to the scheduler.</li> <li>Starts the scheduler.</li> <li>Example:   <pre><code>func Initialize(dbConfig DatabaseConfig) error {\n    db, err := sql.Open(\"postgres\", getDSN(dbConfig))\n    if err != nil {\n        return err\n    }\n    cron := cron.New()\n    err = loadJobs(db, cron)\n    if err != nil {\n        return err\n    }\n    cron.Start()\n    return nil\n}\n</code></pre></li> </ul>"},{"location":"technical_docs/scheduler/#shutdown","title":"Shutdown","text":"<ul> <li>Purpose: Gracefully stops the scheduler and closes the database connection.</li> <li>Steps:</li> <li>Stops the cron scheduler to prevent further job execution.</li> <li>Closes the database connection.</li> <li>Example:   <pre><code>func Shutdown() {\n    cron.Stop()\n    if db != nil {\n        db.Close()\n    }\n}\n</code></pre></li> </ul>"},{"location":"technical_docs/scheduler/#jobgo","title":"job.go \ud83d\udcdd","text":""},{"location":"technical_docs/scheduler/#purpose_1","title":"Purpose","text":"<p>Handles job-related functionalities such as loading, adding, and managing jobs.</p>"},{"location":"technical_docs/scheduler/#key-functions_1","title":"Key Functions \ud83d\udd11","text":""},{"location":"technical_docs/scheduler/#getjobschema","title":"GetJobSchema","text":"<ul> <li>Purpose: Generates and returns a JSON schema for the <code>ScheduledJob</code> struct, aiding in API documentation or validation.</li> <li>Example:   <pre><code>func GetJobSchema() string {\n    reflector := jsonschema.Reflector{}\n    schema, _ := reflector.Reflect(&amp;ScheduledJob{})\n    return schema.String()\n}\n</code></pre></li> </ul>"},{"location":"technical_docs/scheduler/#loadjobs","title":"loadJobs","text":"<ul> <li>Purpose: Loads jobs from the database and schedules them in the cron instance.</li> <li>Steps:</li> <li>Queries the <code>scheduled_jobs</code> table for active jobs.</li> <li>Adds each job to the scheduler.</li> <li>Example:   <pre><code>func loadJobs(db *sql.DB, cron *cron.Cron) error {\n    rows, err := db.Query(\"SELECT * FROM scheduled_jobs\")\n    if err != nil {\n        return err\n    }\n    defer rows.Close()\n    for rows.Next() {\n        job := ScheduledJob{}\n        rows.Scan(&amp;job)\n        addCronJob(cron, job)\n    }\n    return nil\n}\n</code></pre></li> </ul>"},{"location":"technical_docs/scheduler/#addcronjob","title":"addCronJob","text":"<ul> <li>Purpose: Adds a job to the cron scheduler based on its cron expression.</li> <li>Example:   <pre><code>func addCronJob(cron *cron.Cron, job ScheduledJob) {\n    cron.AddFunc(job.ScheduleExpression, func() {\n        Notify(job)\n    })\n}\n</code></pre></li> </ul>"},{"location":"technical_docs/scheduler/#handlepostjob","title":"HandlePostJob","text":"<ul> <li>Purpose: HTTP handler for creating a new scheduled job via a POST request.</li> <li>Example:   <pre><code>func HandlePostJob(w http.ResponseWriter, r *http.Request) {\n    var job ScheduledJob\n    json.NewDecoder(r.Body).Decode(&amp;job)\n    // Insert job into the database and schedule it\n    addCronJob(cron, job)\n}\n</code></pre></li> </ul>"},{"location":"technical_docs/scheduler/#handlegetjobs","title":"HandleGetJobs","text":"<ul> <li>Purpose: HTTP handler for retrieving all scheduled jobs via a GET request.</li> <li>Example:   <pre><code>func HandleGetJobs(w http.ResponseWriter, r *http.Request) {\n    jobs := getJobsFromDB()\n    json.NewEncoder(w).Encode(jobs)\n}\n</code></pre></li> </ul>"},{"location":"technical_docs/scheduler/#dbgo","title":"db.go \ud83d\uddc4\ufe0f","text":""},{"location":"technical_docs/scheduler/#purpose_2","title":"Purpose","text":"<p>Handles database interactions for job scheduling.</p>"},{"location":"technical_docs/scheduler/#key-functions_2","title":"Key Functions \ud83d\udd11","text":""},{"location":"technical_docs/scheduler/#loadjobsfromdb","title":"loadJobsFromDB","text":"<ul> <li>Purpose: Queries the <code>scheduled_jobs</code> table and returns all scheduled jobs.</li> <li>Steps:</li> <li>Executes a SQL query to fetch jobs.</li> <li>Scans the result set into <code>ScheduledJob</code> structs.</li> <li>Returns the jobs for further processing.</li> <li>Example:   <pre><code>func loadJobsFromDB(db *sql.DB) ([]ScheduledJob, error) {\n    rows, err := db.Query(\"SELECT * FROM scheduled_jobs\")\n    if err != nil {\n        return nil, err\n    }\n    defer rows.Close()\n    var jobs []ScheduledJob\n    for rows.Next() {\n        var job ScheduledJob\n        rows.Scan(&amp;job)\n        jobs = append(jobs, job)\n    }\n    return jobs, nil\n}\n</code></pre></li> </ul>"},{"location":"technical_docs/scheduler/#example-workflow","title":"Example Workflow \ud83d\udd04","text":"<ol> <li>Initialization:</li> <li>The scheduler connects to the database and loads jobs into the cron instance.</li> <li> <p>The cron scheduler starts executing jobs based on their defined schedule.</p> </li> <li> <p>Adding Jobs:</p> </li> <li>A new job is added via the <code>POST /jobs</code> endpoint.</li> <li> <p>The job is inserted into the database and added to the scheduler.</p> </li> <li> <p>Execution:</p> </li> <li>The cron scheduler triggers the job's execution at the defined time.</li> <li> <p>Notifications are sent via the appropriate channel.</p> </li> <li> <p>Shutdown:</p> </li> <li>The scheduler stops gracefully, ensuring no running jobs are interrupted.</li> <li>Database connections are closed.</li> </ol> <p>This documentation provides a detailed explanation of the Scheduler Module, enabling you to understand and extend its functionality effectively. Happy scheduling! \ud83c\udf89</p>"}]}